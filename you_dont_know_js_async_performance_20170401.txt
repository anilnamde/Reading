Chapter 1: Asynchrony: Now & Later
===================================

Asynchronous: 
    chunck of code that executes later part in code. ex: callback

Program as chunk:
    chunk that executes now and chunk that executes later 

    //later chunk
    function calculateSome(){
        some = some + 1;
    }
    //now chunk
    function now(){
        console.log(some)
    }
    now()
    setTimeout(calculateSome, 1000)
    now()

Async Console: 
    console API is async in nature and could cause strange output and browser or evironment need IO to print message which is slow hence execuation of console could be deffereed for some time. 
    So in such events rely upon debugger or on printing JSON.strigify.

Event Loop:
    - JS does not have notian on Asynchrony till ES6
    - JS engine runs inside a hosting environment browser or node
    - Event Loop: mechanism to execute multiple chunks one at each time
    - Once setTimeout is executed it puts code in event loop for execution

    event loop example simplified pseudocode:
    var eventLoop = [ ];
    var event;
    while (true) {
        // perform a "tick"
        if (eventLoop.length > 0) {
            // get the next event in the queue
            event = eventLoop.shift();
            // now, execute the next event
            try { 
                event();
            }
            catch (err) {
                reportError(err); 
            }
        }
    } 

Parallel Threading:
    Its prorcess and treads and might execute symultaneously on different processors 
    JS is single treaded environment
    If function order changes and it uses comman data order could affect output. But code becomes non deterministic.

Run-to-Completion:
    If there are two function then they will race to complete. In JS its single threaded so first function if starts will complete and then second

Concurrency (task level):
    Concurrency is when two or more "processes" are executing simultaneously
    ex: load more data as user scrolls down so two process/task 
    Single-threaded event loop is one expression of concurrency 
    scroll and response come after each other not symultaniously event loop takes care of it 

Noninteracting:
    If more than one process/task don't (need)interact, nondeterminism is perfectly acceptable.

Interaction:
    When functions/tasks should coordinate to avoid race conditions

    Ex A: to address race condidtion
    var res = [];
    function response(data) {
        if (data.url == "http://some.url.1") {
            res[0] = data; 
        }
        else if (data.url == "http://some.url.2") { 
            res[1] = data;
        } 
    }
    // ajax(..) is some arbitrary Ajax function given by a library
    ajax( "http://some.url.1", response ); 
    ajax( "http://some.url.2", response );

    Ex B: Race condition scenario
    //// Problem AJAX calls
    var a, b;
    function foo(x) { 
        a = x * 2;
        baz(); 
    }
    function bar(y) { 
        b = y * 2;
        baz(); 
    }
    function baz() { 
        console.log(a + b);
    }
    // ajax(..) is some arbitrary Ajax function given by a library
    ajax( "http://some.url.1", foo ); 
    ajax( "http://some.url.2", bar );

    //// To fix solutionis 
    var a, b;
    function foo(x) { a = x * 2;
        if (a && b) { 
            baz();
        } 
    }

    Ex C: Race condition scenario
    var a;
    function foo(x) { a = x * 2; baz(); }
    function bar(x) { a = x / 2; baz(); }
    function baz() { console.log( a );}
    // ajax(..) is some arbitrary Ajax function given by a library
    ajax( "http://some.url.1", foo ); ajax( "http://some.url.2", bar );

    //// Solution LATCH
    var a;
    function foo(x) { 
        if (!a) {
            a = x * 2;
            baz(); 
        }
    }

Cooperation:
    Long running tasks
    example : Ajax response handler that needs to run through a long list of results to transform the values. Scenario reads alot of values from server browser will get stuck user will not be able to do anything.

    var res = [];
    // `response(..)` receives array of results from the Ajax call 
    function response(data) {
        // add onto existing `res` array
        res = res.concat(
            // make a new transformed array with all `data` values doubled
            data.map( function(val){ return val * 2;}) 
        );
    }
    // ajax(..) is some arbitrary Ajax function given by a library
    ajax( "http://some.url.1", response ); 
    ajax( "http://some.url.2", response );

    ///////// simple solution would be to split chunk of data at a time
    var res = [];
    // `response(..)` receives array of results from the Ajax call 
    function response(data) {
        // let's just do 1000 at a time
        var chunk = data.splice( 0, 1000 );
        // add onto existing `res` array
        res = res.concat(
            // make a new transformed array with all `chunk` values doubled
            chunk.map( function(val){ return val * 2;}) 
        );
        if (data.length > 0) {
            // async schedule next batch setTimeout( function(){
            response( data ); }, 0 );
        } 
    }
    // ajax(..) is some arbitrary Ajax function given by a library
    ajax( "http://some.url.1", response ); 
    ajax( "http://some.url.2", response );

Jobs:
    ES6 brings Job queue like promises
    Whats diff between job queue and event loop: metaphor: the event loop queue is like an amusement park ride, where once you finish the ride, you have to go to the back of the line to ride again. But the Job queue is like finishing the ride, but then cutting in line and getting right back on.
    So Job queue is like execute later, but as soon as possible.

Statement Ordering:
    Order in which we write code need not be same in which JS engine executes code
    it's possible that the JS engine, after compiling this code and perform safe optimization

Review:


Chapter 2: Callbacks
==============================================================
    Callbacks are work horse of JavaScript but still there is need of cleaner absraction like promieses

Continuations:
    problem is that the moment callbacks come in picture code become difficult to react, understand and debug
    ex:
    // A
    setTimeout( function(){ // C}, 1000 ); 
    // B
Sequential Brain:
    It works like event loop while it focus on one thing at a time (excluding IMP funcition of respiration, breathing etc)  
Doing Versus Planning:
    Human brain works sequencially while planning and try solve one thing at a time. Problme with Asyn workflow is same as it hard to predict order in which it will execute.
Nested/Chained Callbacks:
    Callback hell is a problem. OR pyramid of doom. Such code is always difficult to understand as our brain try solve problems step by step aynch nature is just difficult to digest.

    ex:
    listen( "click", function handler(evt){ 
        setTimeout( function request(){
            ajax( "http://some.url.1", function response(text){ 
                if (text == "hello") {
                    handler(); 
                }
                else if (text == "world") { 
                    request();
                } 
            } );
        }, 500) ; 
    } )

    Understanding aynch flow in code is always difficult
    ex: 
    doA( function(){ 
        doB();
        doC( function(){ 
            doD();
        })
        doE(); 
    } );

    doF();

    Order in which they called : doA() doF() doB() doC() doE() doD(). If doA(..) or doD(..) aren't actually async then order of execution changes to doA() doB() doC() doD() doE() doF()

Trust Issues:
    When asyn code is called its control returning depends on third party(which we dont have control on) server OR api. 
    ex: order of code is codeA() codeB() ajax() as ajax() is async
        //codeA()
        ajax()
        //codeB()

Tale of Five Callbacks:
    Relying on thrid party async api is difficult (story of analitics calling payment method 5 time). Might need us to add more latches scenarios

Not Just Others' Code:
    Can we trust our own code ? 
    ex: add(a, b){
        return a+b;
    }

    what if a is passes as string ? sure you would keep adding checks for this. With callback involve it grows multifold

Trying to Save Callbacks:
    API design methods to handel aynch fall gracefully 
    1. split callbacks: 
        ex: ajax(suc, err)
    2. error-first style: 
        ex: ajax((err, res)=>{
                if(err){
                    handleErr()
                }else{
                    doSomething(res)
                }
            })

    ex:
    function result(data) { 
        console.log( a );
    }
    var a = 0;
    ajax( "..pre-cached-url..", result ); 
    a++;

    What will be output here 0 Or 1. Thats unpredictable callback async code

Review:

    We need a generalized solution to all of the trust issues, one that can be reused for as many callbacks as we create without all the extra boilerplate overhead. More sophisticated and capable async patterns


Chapter 3: Promises
================================
Callback philosophy is "here's what happens later, after the current step finishes."

But what if we could uninvert that inversion of control? What if instead of handing the continuation of our program to another party, we could expect it to return us a capability to know when its task finishes, and then our code could decide what to do next?
This paradigm is called Promises.

What Is a Promise?:
    Wait understand it
Future Value: 
    Burger example :(
Values Now and Later:
    Async later example sum(getx, gety, ()=>{})
Promise Value:
    Ex:
    function add(xPromise,yPromise) {
        // `Promise.all([ .. ])` takes an array of promises, and returns a new promise that waits on them all to finish
        return Promise.all( [xPromise, yPromise] )
        // when that promise is resolved, let's take the received `X` and `Y` values and add them together. 
        .then( function(values){
            // `values` is an array of the messages from the // previously resolved promises
            return values[0] + values[1];
        }); 
    }

    // `fetchX()` and `fetchY()` return promises for // their respective values, which may be ready // *now* or *later*.
    add( fetchX(), fetchY() )
    // we get a promise back for the sum of those // two numbers.
    // now we chain-call `then(..)` to wait for the // resolution of that returned promise.
    .then( function(sum){
        console.log( sum ); // that was easier!
    });

    Notes:
    1. Promise once resolved or reject stays that way for ever and becomes immutable 
    2. Once resolved reject Promise can be passed back by third party and code cannot modify it and can onlly be obsered.

Completion Event:
    Promise behaves as a future value. Way to understand Promise is like flow control mechanizm for two or more steps in async task
    Completion event is when action is needed to do when task is done
    There is also "Continuation Event", "Completion Event"(when task() completed) and "Continuation Event" (and what after task())

    ex: Callback

    function task(){
        //asyn
        return listner;
    }

    listner = task()
    listner.on("success", ()=>{})
    listner.on("fail", ()=>{})

    ex: Clean would be
    var evt = foo( 42 );
    // let `bar(..)` listen to `foo(..)`'s completion
    bar( evt );
    // also, let `baz(..)` listen to `foo(..)`'s completion
    baz( evt );

    Here advantage is that foo() does not have to care that bar and baz waiting or listening  at all

Promise "Events":
    Promise has fullfillment and rejection events.

    function foo(x) {
        // start doing something that could take a while
        // construct and return a promise
        return new Promise( function(resolve,reject){
            // eventually, call `resolve(..)` or `reject(..)`, // which are the resolution callbacks for
            // the promise.
        } ); 
    }
    var p = foo( 42 );
    bar( p );
    baz( p );

    // what bar does
    function bar(fooPromise) {
        // listen for `foo(..)` to complete fooPromise.then(
        function(){
            // `foo(..)` has now finished, so // do `bar(..)`'s task
        }, function(){
            // oops, something went wrong in `foo(..)`
        } );
    }

    Notes:
    1. Promise is revelation patter(https://blog.domenic.me/the-revealing-constructor-pattern/) 
    2. It takes function that executes immediately unlike then() call
    3. This funciton takes two arguments resolve and reject. These are resolution fucntion represention fullfullment and rejection respectively
    4. above example bar and baz will be called irrespective of if promise is resolved or rejected


    ex: Now its like
    function bar() {
        // `foo(..)` has definitely finished, so // do `bar(..)`'s task
    }
    function oopsBar() {
        // oops, something went wrong in `foo(..)`, // so `bar(..)` didn't run
    }
    // ditto for `baz()` and `oopsBaz()`
    var p = foo( 42 ); 
    p.then( bar, oopsBar ); 
    p.then( baz, oopsBaz );

    Note:
    1. above example in both cases either bar, baz or oppBaz will be called based on how promise is resolved or rejected


Thenable Duck Typing:
    Type check for promise as promise could be native or library how to do it. Duck typing
    ex:
    typeof p is === 'function' || typeof p is === 'object' && p.then 

    But there still its not safe 

Promise Trust:
    Promises solves trust isseues on async code
    
    1. Calling Too Early:
        Even if promise is resolved its .then() will get calld asyncronosly 
    2. Calling Too Late:
        When resolved promise then will be called in order
        ex:
        p.then( function(){ p.then( function(){
            console.log( "C" ); 
        } );
        console.log( "A" ); } );
        p.then( function(){ 
            console.log( "B" );
        } );
        op: // A B C
    3.Promise Scheduling Quirks:
        You should not rely on the order of execution of callback. it is not good paractice
    4. Never Calling the Callback:
        Promise will sure notify resolve or rejected callback.
        But what if it never gets to resolve or reject ? Promise provied abstraction race() which implements "Promise timeout pattern"

        ex:
        function timeoutPromise(delay) {
            return new Promise( function(resolve,reject){ 
                setTimeout( function(){
                    reject( "Timeout!" ); 
                }, delay );
            } ); 
        }

        Promise.race( [ foo(),
            timeoutPromise( 3000 )
        ]) .then(
            // attempt `foo()` // give it 3 seconds
            function(){
                // `foo(..)` fulfilled in time!
            }, function(err){
                // either `foo()` rejected, or it just // didn't finish in time, so inspect // `err` to know which
            } )

Calling Too Few or Too Many Times:
    One is appropriate number of calls VS it never called
    Promise are designed to be resoved only once. If some readon resolve() or reject() called more than once promise will only accept first resolution.
    However if you have registered mulitple p.then() then they will get executed multiple times

Failing to Pass Along Any Parameters/Environment:
    Promises can have, at most, one resolution value (fulfillment or rejection). If you don't explicitly resolve with a value either way, the value is undefined.
        
Swallowing Any Errors/Exceptions:
     If you reject a Promise with a reason (aka error message), that value is passed to the rejection callback(s). If at any point in the creation of a Promise, or in the observation of its resolution, a JS exception error occurs, such as a TypeError or ReferenceError , that exception will be caught, and it will force the Promise in question to become rejected.
     ex:
     var p = new Promise( function(resolve,reject){ 
        foo.bar(); // `foo` is not defined, so error! 
        resolve( 42 ); // never gets here :(
        } );
    p.then(
    
    function fulfilled(){
        // never gets here :(
    },
    
    function rejected(err){
        // `err` will be a `TypeError` exception object
        // from the `foo.bar()` line.
    } )

    JS exception that occurs from foo.bar() becomes a Promise rejection that you can catch and respond to.


    What about exception in if promise is fullfilled ? 
    - Once exception comes it gets swalloed ? No it generates another promise rejection as currntly reolved promise cannont be modified as Promise is immutable and once resolved cannont turn into rejection.
    - Be carefull and its difficult to narrow it down as if multiple then are registred if one fails subsequent then() will not be called.

    ex:
    ar p = new Promise( function(resolve,reject){ 
        resolve( 42 );
    } );
    p.then(
        function fulfilled(msg){
            foo.bar();
            console.log( msg ); // never gets here
        },
        function rejected(err){
            // never gets here either :(
        } );
Trustable Promise?:
    - Promises don't get rid of callbacks at all. They just change where the callback is passed instead of passible callbacks,
    - Promise.resolve(..) : If you pass an immediate, non-Promise, non-thenable value to Promise.resolve(..) , you get a promise that's fulfilled with that value. In other words, these two promises p1 and p2 will behave basically identically
    ex:
        var p1 = new Promise( function(resolve,reject){
             resolve( 42 );
        } );
        var p2 = Promise.resolve( 42 );

    But if you pass a genuine Promise to Promise.resolve(..) , you just get the same promise back
    ex:
        var p1 = Promise.resolve( 42 ); 
        var p2 = Promise.resolve( p1 ); 
        p1 === p2; // true

     if you pass a non-Promise thenable value to Promise.resolve(..) , it will attempt to unwrap that value, and the unwrapping will keep going until a concrete final non-Promise-like value is extracted
     ex:
        var p = {
            then: function(cb) {
            cb( 42 ); }
        };
        // this works OK, but only by good fortune
        p .then(
            function fulfilled(val){ 
            console.log( val ); // 42
        },
        function rejected(err){
            // never gets here
        } );

    ex:

    var p = {
        then: function(cb,errcb) {
            cb( 42 );
            errcb( "evil laugh" ); 
        }
    };

    p .then(
        function fulfilled(val){ 
            console.log( val ); // 42
        },
        function rejected(err){
            // oops, shouldn't have run
            console.log( err ); // evil laugh 
        }
    );

    Good paractice is to pass thenable to Promise.resovle() and it would behave well and not just random
    ex: 
    Promise.resolve( p ) .then(
        function fulfilled(val){ console.log( val ); // 42
    },
    function rejected(err){
        // never gets here
    } );

    ex:
    // don't just do this:
    foo( 42 )
    .then( function(v){
    console.log( v ); } );
    
    // instead, do this:
    Promise.resolve( foo( 42 ) ) .then( function(v){
    console.log( v ); } );

Trust Built:
    Promises are a pattern that augments callbacks with trustable semantics, so that the behavior is more reason-able and more reliable

Chain Flow:
    Promises are not just a mechanism for a single-step this-then-that We can string multiple Promises together to represent a sequence of async steps.

    The key to making this work is built on two behaviors intrinsic to Promises:
    1. Every time you call then(..) on a Promise, it creates and returns a new Promise, which we can chain with. 
    2. Whatever value you return from the then(..) call's fulfillment callback (the first parameter) is automatically set as the fulfillment of the chained Promise (from the first point).

    ex: 
    var p = Promise.resolve( 21 );  // this returns promise first

    var p2 = p.then( function(v){
            console.log( v ); // 21
            // fulfill `p2` with value `42`
            return v * 2;  // this again returns promise 
        } 
    );
    // chain off `p2`
    p2.then( function(v){
        console.log(v) // 42
    });

    we can chain them together instead of creating intermediate valirables p, p2 etc
    ex:
    var p = Promise.resolve( 21 );
        p
        .then( function(v){
            console.log( v ); // 21
            // fulfill the chained promise with value `42`
            return v * 2; 
        })
        
        // here's the chained promise
        .then( function(v){ 
            console.log( v ); // 42
        })

    So here first then() is first stem while second then() is second step.

    Now what if we want to do something asynchronous as a part of steps ? As cucrently promise is immidieately resolved so it return right away. Use promise instead while returning and still things work.

    var p = Promise.resolve( 21 ); 

    p.then( function(v){
        console.log( v ); // 21
        // create a promise and return it
        return new Promise( function(resolve,reject){ 
            // fulfill with value `42`
            resolve( v * 2 );
        } ); 
    })
    .then( function(v){ 
        console.log( v ); // 42
    } );

    Even if async code is introduce it will still work
    var p = Promise.resolve( 21 );
    p.then( function(v){ 
        console.log( v ); // 21
        //create promise and return
        return new Promise( function(resolve,reject){ 
            // introduce asynchrony!
            setTimeout( function(){
                // fulfill with value `42`
                resolve( v * 2 ); 
            }, 100 );
        } ); 
    })
    .then( function(v){
        // runs after the 100ms delay in the previous step console.log( v ); // 42
    } );

    value passing from step to step in these examples is optional. If you don't return an explicit value, an implicit undefined is assumed, and the promises still chain together the same way. Each Promise resolution is thus just a signal to
    proceed to the next step

    ex: general utility
    function delay(time) {
        return new Promise( function(resolve,reject){
            setTimeout( resolve, time ); 
        } )
    }
    delay( 100 ) // step 1 
    .then( function STEP2(){ 
        console.log( "step 2 return delay( 200 );
    })
    .then( function STEP3(){
        console.log( "step 3(after another 200ms)" );
    })
    .then( function STEP4(){
        console.log( "step 4(next Job)" );
    return delay( 50 ); 
    })
    .then( function STEP5(){ 
        console.log( "step 5(after another 50ms)" );
    })

    return delay(200) as creating a promise that replaces the earlier-returned chained promise

    Let's look at a scenario that's a little more practical. AJAX
    ex:
    function request(url) {
        return new Promise( function(resolve,reject){ 
            // the `ajax(..)` callback should be our // promise's `resolve(..)` \
            function ajax( url, resolve );
         } ); 
    }

    request( "http://some.url.1/" ) 
    .then( function(response1){
        return request( "http://some.url.2/?v=" + response1 ); 
    })
    .then( function(response2){ 
        console.log( response2 );
    } );

    Notes:
        Commonly dev want to use promise enabled async code with utils which are not Promise aware like AJAX
        Above example by returning promise request() we achieved it so response1 transferred to subsequent call
        Above example not just multistep async sequence but also works as message queue 


    ex: exception handling 
    // step 1:
    request( "http://some.url.1/" )
    // step 2:
    .then( function(response1){ 
        foo.bar(); // undefined, error!
        // never gets here
        return request( "http://some.url.2/?v=" + response1 ); })
    // step 3:
    .then( function fulfilled(response2){
        // never gets here
    },
    // rejection handler to catch the error function 
    rejected(err){
        console.log(err); // `TypeError` from `foo.bar()` error
        return 42; 
    })
    // step 4:
    .then( function(msg){ 
        console.log( msg );
    } )

    NOtes: 
    When the error occurs in step 2, the rejection handler in step 3 catches it.
    The return value ( 42 in this snippet), if any, from that rejection handler fulfills the promise for the next step (4), such that the chain is now back in a fulfillment state
    If then() only has fullfillment handler then in that case assumed (default) rejection handler is submitted . which again rethrows the exception and hence p2 rejection call back is called and so on.

    ex: 
    var p = new Promise( function(resolve,reject){ reject( "Oops" );
    } );
    var p2 = p.then( function fulfilled(){
        // never gets here
        }

        // assumed rejection handler, if omitted or
        // any other non-function value passed
        // function(err) {
        // throw err;
        // }
    )

    - If a proper valid function is not passed as the fulfillment handler parameter to then(..) , there's also a default handler substituted: It passes values as is back 
    - The then(null,function(err){ .. }) pattern -- only handling rejections (if any) but letting fulfillments pass through --
    has a shortcut in the API: catch(function(err){ .. }) .
    ex:
    var p = Promise.resolve( 42 );

    p.then(
        // assumed fulfillment handler, if omitted or
        // any other non-function value passed
        // function(v) {
        // return v;
        // }
    null,
    function rejected(err){
        // never gets here
    } );

    SUMMARY:
    Let's review briefly the intrinsic behaviors of Promises that enable chaining flow control:
    1. A then(..) call against one Promise automatically produces a new Promise to return from the call.
    2. Inside the fulfillment/rejection handlers, if you return a value or an exception is thrown, the new returned (chainable) Promise is resolved accordingly.
    3. If the fulfillment or rejection handler returns a Promise, it is unwrapped, so that whatever its resolution is will become the resolution of the chained Promise returned from the current then(..).

    Certainly, the sequential expressiveness of the chain (this-then-this-then-this...) is a big improvement over the tangled mess of callbacks as we identified

    But there's still a fair amount of boilerplate ( then(..) and function(){ .. } ).

Terminology: Resolve, Fulfill, and Reject:
    "resolve the Promise" to mean either fulfilling or rejecting the Promise.
    ES6 specification uses onFulfilled(..) and onRejected(..) to label these two callbacks, so they are accurate terms.

Error Handling:
    Most common way to handle error in js is try catch but it does not help in Asynch workflow. As try cache is made for Synch code.
    Now if we consider then() methods with callback it takes care of exception handling in a better way for aynch code.
    ex:
    var p = Promise.reject( "Oops" );
    p.then(
    function fulfilled(){
        // never gets here
    },
    function rejected(err){
        console.log( err ); // "Oops" }
    );

    On surface this kind of error handling looks great but if we take a closer look it has issues. If there is genune excepiton thrown by fulllilled callback(below ex) them rejected does not get executed (but it return new promise with status rejected as we know that its already a resolved promise and promise are immutable)
    That is problem as if exception comes like these they quickly get swallowed and thats not really a good idea.
    ex:
    var p = Promise.reject( "Oops" );
    p.then(
    function fulfilled(){
        // numbers don't have string functions, // so will throw an error
        console.log( msg.toLowerCase() );
    },
    function rejected(err){
        // never gets here
    );

    Warning: 
    If you use the Promise API in an invalid way and an error occurs that prevents proper Promise construction, the result will be an immediately thrown exception, not a rejected Promise. new Promise(null) , Promise.all() , Promise.race(42) so on

Pit of Despair:
    - Promise error handling is unquestionably "pit of despair" by design. So any exception is swallowed by the Promise
    - To avoid losing an error to the silence of a forgotten/discarded Promise, some developers have claimed that a "best practice" for Promise chains is to always end your chain with a final catch(..) , like:
    ex:
    var p = Promise.resolve( 42 );
    p.then( function fulfilled(msg){
        // numbers don't have string functions, 
        // so will throw an error
        console.log( msg.toLowerCase() );
    } )
    .catch( handleErrors );

    So any excpeiton gets cought in handleErrors. Problem: what if handleErrors itself has exception
Uncaught Handling:
    One of solutions used by libraries is to use done(..) its last callback which does not return any promise again. And any exceptions in done is thrown at global level. Unfortunately done() is not part of ES6
    ex:
    var p = Promise.resolve( 42 );
    p.then(
    function fulfilled(msg){
        // numbers don't have string functions, 
        // so will throw an error
        console.log( msg.toLowerCase() );
    } )
    .done( null, handleErrors );
    // if `handleErrors(..)` caused its own exception, it would
    // be thrown globally here

Pit of Success:
    If a Promise is rejected, it defaults to noisily reporting that fact to the developer console (instead of defaulting to silence). You can opt out of that reporting either implicitly (by registering an error handler before rejection), or explicitly (with defer() ). In either case, you control the false positives.

    This design is a pit of success. By default, all errors are either handled or reported -- what almost all developers in almost all cases would expect. You either have to register a handler or you have to intentionally opt out, and indicate you intend to defer error handling until later; you're opting for the extra responsibility in just that specific case.

    ex:

    var p = Promise.reject( "Oops" ).defer();
    // `foo(..)` is Promise-aware
    foo( 42 ) .then(
    function fulfilled(){ return p;
    },
    function rejected(err){
    // handle `foo(..)` error
    } )


Promise Patterns :
    Patterns build as abstraction over promises. Makes code readable and maintainable.

--Promise.all([ .. ]):
    what about doing two or more steps concurrently.

    > array of values passed into Promise.all([ .. ]) can include Promises, thenables, or even immediate values
    > main promise returned from Promise.all([ .. ]) will only be fulfilled if and when all its constituent promises are fulfilled. 
    > If any one of those promises instead is rejected, the main Promise.all([ .. ]) promise is immediately rejected
    > always have rejection/error bloack in the promise 


    ex:

    var p1 = request( "http://some.url.1/" ); 
    var p2 = request( "http://some.url.2/" );
    
    Promise.all( [p1,p2] )
    .then( function(msgs){
        // both `p1` and `p2` fulfill and pass in 
        // their messages here
        return request("http://some.url.3/?v=" + msgs.join(",") );
    })
    .then( function(msg){
        console.log( msg ); } 
    )
--Promise.race([ .. ]):
    > Promise.race([ .. ]) also expects a single array argument, containing one or more Promises, thenables, or immediate values.    
    > Promise.race([ .. ]) will fulfill if and when any Promise resolution is a fulfillment, and it will reject if and when any Promise resolution is a rejection
    > A "race" requires at least one "runner," 
    > metaphor of "only the first across the finish line wins"
    > callback resolve gets single message instead of array 
    ex:
    // `request(..)` is a Promise-aware Ajax utility, 
    // like we defined earlier in the chapter
    var p1 = request( "http://some.url.1/" ); 
    var p2 = request( "http://some.url.2/" );
    Promise.race( [p1,p2] ) 
    .then( function(msg){
        // either `p1` or `p2` will win the race
        return request( "http://some.url.3/?v=" + msg); 
    })
    .then( function(msg){ 
        console.log( msg );
    });

--Timeout Race:
    if process not done in certain time reject promise instead of waiting for long
    ex:
     Promise.race( [ 
        foo(),
        timeoutPromise( 3000 )
    ]) 
    .then(
        // attempt `foo()` // give it 3 seconds
        function(){
            // `foo(..)` fulfilled in time!
        }, function(err){
            // either `foo()` rejected, or it just // didn't finish in time, so inspect // `err` to know which
        } 
    );

--Finally:
    > In prev timout race ex if promise is timeout/ignroed how to make resouces collect by GC. finally() is suggested by devs in ES7 it might land.
    > finally could retur promise to chain

    ex:
    var p = Promise.resolve( 42 );
    p.then( something ) 
    .finally( cleanup ) 
    .then( another ) 
    .finally( cleanup );

--Variations on all([ .. ]) and race([ .. ]):
    > none([ .. ]): when all promises are rejected
    > any([ .. ])  only one need to be fullfilled
    > first([ .. ])  only first resolved
    > last([..]) only last resolved

    ex: first implementation
    // polyfill-safe guard check
    if (!Promise.first) { 
        Promise.first = function(prs) {
        return new Promise( function(resolve,reject){ 
            // loop through all promises 
            prs.forEach( function(pr){
                // normalize the value
                Promise.resolve( pr )
                // whichever one fulfills first wins, and // gets to resolve the main promise .then( resolve );
            } ); 
        } );
        }; 
    }
-- Concurrent Iterations:
    > Iterating and performing operation like some(), map(), forEach(), every() on map

.. page 68

