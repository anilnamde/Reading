Hour 1
==========
Who
date
Who am i


Simple Command
	Command

Compex Command
	Command arg1 arg2 ... 

Compound Command
	Command1; Command2; ... CommandN;
	// ; : command separator 

Shell:
	Accepts inputs and processes it also it has the programming capabilities conditional statement, loops etc
	If we enter more than one world then "word1 word2 word3 ... wordN" shell treats first as command and others as arguments
Types Shell
	= Bourn Shell - $ - ksh sh bash (bin/sh)
		- ALGOL style syntax
		- no command history
		- no file name auto completion
		- difficulty in executing multiple background processes
	= C shell - % - csh tcsh (bin/csh new /bin/tcsh http://www.primate.wisc.edu/software/csh-tcsh-book/)
		+ c style syntax
		+ history
		+ auto compete file name
		+ job control
		+ aliases 
		- lacking functions
	= Kourn shell (Cshell + Bourn shell)
		+ function support
		+ arithmatic support
	= Bash Bourn Again Shell
		installs as /bin/bash
		+ standardised portable
	[For root user prompts become # so be careful]
	

Hour 2
=======
Kernel
Command - Propgram with arguments
Utility - Simple commands

Shell Lifecycle
	- Login - /etc/passwd for password entry
	- Initializeation read profiles
		- etc/profile file : File maintain by sys adming for all users 
		- or .profile file : In users control
	- Dispaly propmpt

Shell Execution
	- Interaction - command - exec - command mode
		- start using /bin/sh comamnd
		- exit to stop
	- noninteractive - When shell accepts programm runs and when done exits
		- /bin/sh filename [file name set of command to execute ex: date; who am i;]

Initialization File Content
	- should be small to setup complete working environment
	- /etc/profile  maintained by sys admin
	- .profile  under user control do as much as u want in here
	- Things to set
		- type of terminal
		- list of directories to locate command

Setting Terminal Type
	TERM=vt100

Setting PATH
	- PATH=/bin:/usr/bin NOTE: separated by :
	- path to look for a command
	- if we type on command prompt and its not found such message is printed on the console

Setting the MANPATH
	- settting path for man page help
	- ex: MANPATH=/usr/man:/usr/share/man
	- ex command: man who t

Making a Shell Script Executable
	- make file executatble (chmod a+x ./logins)
	- make sure right shell is used

	- ex:
		#!/bin/sh
		date ; who ;

Comments
	# anything after this is comment

Getting Help:
	- man command

Hour 3 
======== 
Working with files
	- simple file : 
	- directory files
	- special files: like devices etc

Listing file
	- ls comand
	- ls -F :  to find which are dir and files
	- ls -1 : to print output in one line
	- ls -a : to list all hidden file directories

Options Grouping
	- ls -aF : to list hidden files and show types
	- order of flags do not matter

Viewing content of file
	- Cat file(s) : to list the content of file
	- cat -n file1 file2 : -n list number in file lines
	- cat -b file : -b to skip numbering blank lines

Counting Word:
	- wc [option] files : provides summary of lines words characters
	- ex : wc file
		[lines no] [words no] [charcters no]   [file name]
	- ex : wc .rhosts .profile
		7 14 179 .rhosts
		133 405 2908 .profile
		140 419 3087 total
	- options 
		- l : lines
		- w : words
		- c or m : characters
Manipulating Files:
	= Copy : cp sourceFile destinationFile
		- if destinationFile exists it gets overriden automatically
		- cp -i source dest : - interactive mode it ask if u like to override or not
		- $ cp test_results work/: copies test_results in work
		-  $ cp res.01 res.02 res.03 work/: copies multiple files to work. Only works in destination if directory
	= Rename
		- mv source dest
		- silently overrides destination files
		- i : has interactive mode
	= Removing files
		- rm file(s) - remvoe one or more file
		- rm res.01 res.02 
		- common error -attempt to remove directory, file not exist
		- rm -i hw1 hw2 hw3 : interactive mode
		- rm res.01 res.02 res.03 if file res.02  does not exist rest two are still removed



Hour 4
=======
Working with directories
- Absolute path cannot exceep 1024 old ways 
- file name can have a-z 0-9 _ . - 
- unix file name are case sensitive
- pwd : command print working directory
- . current dir .. parent directory
Home directory
	- cd  :if issued without argument set set home directory as current on then type pwd to see path
Change Directory
	- cd dirnamepath
Listing Files & Directories
	- ls dir : dir directory whose content we want to see
	- ls /home /usr/local :  you can specify more than one dir
	- list filename : only show one file
	- $ ls .profile docs/ /usr/local /bin/sh : mix match is allowed
	- ls -d /home/ranga: -d to force see only name of dir no t the content
Manupulating Directory
	- mkdir docs pub : creat more than one directories
	- mkdir /tmp/ch04/test1 : create effor if any sub directory does not exists
	- mkdir -p /tmp/ch04/test1 : create all the listed tree of directories
Copy Directory
	- cp -r source dest : copy directory recursiverly copies source under dest directory
	- $ cp -r docs/book docs/school work/src /mnt/zip : copies all list to last directory
	- $ cp -r .profile docs/book .kshrc doc/names work/src /mnt/jaz : mix of file and directory if fine
Move Directory:
	- mv source destination
	- $ mv /home/ranga/names /tmp : moves file names to directory tmp
	- mv docs/names /tmp/names.txt : move and rename in one command is allowed
	- mv work/ docs/ .profile pub/ : move mu
	- mv /tmp/ch01 /home/ranga/docs : moving file from one file system to other does not work. in such case u need to copy first and then remove it
Removing directory
	- rmdir
	- rm -rf : removes everything
	- rmdir ch01 ch02 ch03 multiple dir : removes only empty directory
	- ls -A bar : to check if directory is empty or not


Hour 5
=======
Manipulating File Attributes
- Manipulating Permission, Ownners, Group

Different Types of file in Unix and how to identify them
	- ls -l : list details of file
	- -rwxr-xr-x : first - indicates its notrma file following are other symbol and meaning
		- Regular file
		l Symbolic link
		c Character special
		b Block special
		p Named pipe
		s Socket
		d Directory file
	- file fileName: programe hellps to analyse and print information of file

Rugular file: can store text or binary data
Symbolic Links:
	- its like shortcut and 
	- many links can point to same fiel/directory
	- ls -l : to list link
	- ln -s source destination : to create link
	- ln -s /home/httpd/html/users/ranga /home/ranga/public_html : you can use relative or absolute path
	- catch ln -s /home/ftp/pub/ranga pub: if pub directory is in current path then ranga link is created under pub directory
Devices files:
	- files access points to devices coneected PC
	- located under /dev 
	- Two tyeps of device file
		- Block special file
			> can send large chunk of data
			> brw------- : starts with b
			> also has minor and major numbers
		- Character special file
			> communicates to devices one char at time
			> ls -l : crw------- : starts with c
			> apart from that it shows minor and major number which indicates device driver to be used
Names piples file:
	- acommand | bcommand
	- simple are anynimouse pipe but when more control needed named piple can be created
	- this helps tro precess communicate each other IPC its popular way of ipc in unix
	- p----- : p indicates named pipe
Socket files:
	- Socket can pass data and info betwenn process running of two diff machines 
	- Socket is created with communication with other process on newtowrk is required
	- Web browser uses sockets to communicate to web server

Owners, Group, Permissions
	- Files have permission Owners, Group and Others
	- Permision on to each section read, write and execute
	- ls -l : display permission on the file
	- permissons -rwxrwxrwx [filetytpe|owner read write execute| group read write execute | other read write execute]
	- ls -l : output -rwxr-xr-x   1 ranga    users        2368 Jul 11 15:57 .profile*
		Here user is ranga and group is users
	- Directory also has permission and its equally important


SUID and SGID File Permission
	- additional permission can be given to files with Set User ID Set Group ID bit
	- whe SUID bit set executed file you inherit permission of owner if not then user who executed file his permission are used
	- Same goes for SGID
	- SUID and SGID bits will appear as the letter "s" [-r-sr-xr-x] S capital S means executatble bit not set
	-  SUID bit or stick bit

Changing permission:
	- chmod expression files
		- expression can be Symbolic or Octal
		- Symbolic method syntax 
			(who)(action)(permissions
			- who -> u Owner - g group - a all - o others
			- action -> + add permission - remove permissin = explicitly set file permission
			- permission -> r read, w write, x execute, s SUID or SGID
			ex:
				- chmod a=r * Or chmod guo=r * : read permissinn to all files in folder
				- chmod go-w .profile : only owner to have write permission
				- cd ; chmod go= * OR cd ; chmod go-rwx * : to remove permisson on all files in home dir for others
				- NOTE: order in which permissio or user appers is irrelavent
				- chmod go-w,a+x a.out : to set more than one permission use , 
				- cd ; chmod ug+s . : to set SUID SGID bits home dir
				- chmod -R o+r pub : -R recursive change permission for all files
		- Octal Method:
			- uses numbr to set permission to three categories
			- 4 - 100 - Read / 2 - 010 - Write / 1 - 001 - Execute
			- SGID SUID as first number in group of 4 [XXXX - SUID/Owner/Grop/Others]
			ex:
				- chmod 0444 * : read to all
				- chmod 0600 .profile : read write to Owner
				- GOTCHA:  (Main difference between Octal Symbol mehtod)
					- Octal one used reset permission for all the users
					- While in Symbole we can do "chmod u+rw file" this just modify it for owner not modify permission for others and group
Change Owner and Group
	- chown and chgrp: 
	- chown
		chown options user:group files
		- options - check man :P
		- user - could be user id or user name
		- group - group id or name : to just change owner you can ignore group value
		- chown ranga: /home/httpd/html/users/ranga : change owner to ranga
		- chown -R ranga: /home/httpd/html/users/ranga : recirsovely change 
	- chgrp:
		chgrp options group files
		- chgrp authors /home/ranga/docs/ch5.doc: chnage group to authors
		- chown :authors /home/ranga/docs/ch5.doc: same can be achived with chown if chgrp is not available

HOUR 6
========
Starting Process
	- ps list process
	- pid is unique 16 bin singed number
	- Foregroupd
		- any command runs in foreground
	- Background 
		- add & at end of the command to run it in background
		- ex: ls ch0*.doc & : first line shows [1] 37788 its job number and process id
		- if cmd need input it stops wait till its again moved to foreground
		- NOTE: if process id completion of bg task is not shown it might be turned off on shell 
			- To start it 'set +o monitor'
			- To stop it 'set -o monitor'
			- To see all shell option 'set -o'
Moving process from Foreground to Background (bg)
	- ex $:long_running_process
	- press Ctrl+Z
	- You are told the job number ( 1) and that the process is Stopped
	- You then get a prompt. To resume the job in the background, you enter the bg 
	- ex: bg
	- ex:
	- $ long_running_process
		^Z[1] + Stopped (SIGTSTP)        long_running_process
	$ long_running_process2
		^Z[2] + Stopped (SIGTSTP)        long_running_process2
	- To move the first one to the background, I use the following:
		$ bg %1
		[1]     long_running_process &
	- The second process is still suspended and can be moved to the background as follows:
		$ bg %2
		[2]     long_running_process2 &

Moving a Background Process to the Foreground ( fg Command)
	- first longs running process moved to background 
	$ long_running_process
		^Z[1] + Stopped (SIGTSTP)
	$ bg
		[1]     long_running_process &
	- You can move it back to the foreground as follows:
	$ fg %1
		long_running_process

Keeping background process around  (nohup)
	- If you want to not temrinate process 
	- its output is redirected to file by default
	$ nohup [command to run in backgournd] &
	$ nohup ls &

Waiting for Background Processes to Finish ( wait Command)
	- two ways 
	- two ways to wait for a background process to finish
	- or wait command
	- three ways to use the wait (without arg, with process ID or with job number prefixed with % sign)
		- wait without arg waits for all bg tasks to finish
		- wait %1 

Listing Running Processes
	- Jobs command
		- Jobs show you processes suspended and in background
		- Its foreground command hence does not show forground tasks
		- ex:
		$ jobs
			[3] +  Running            first_one &
			[2] - Stopped (SIGTSTP)   second_one
			[1]   Stopped (SIGTTIN)   third_one &
	- ps command
		- shows all processes
		ex: ps
		- $ ps -f [full option]
			UID   PID  PPID  C    STIME TTY     TIME CMD
			dhorvath 6738  3662  0 10:23:03 pts/6   0:00 first_one
		- -e ( e for every)
		- -u ( u for user)
		- -a : show information of all user
		- -x : show information about process without terminal

Killing a Process ( kill Command)
	- kill %1
	- kill [pid]
	- if process ignores kill TERM signal use "kill -9" or "kill -KILL" followed by the process ID or job number

Job ID Versus Process ID: 
	- are different
Subshells:
	- if you start shell from shell it creats subshell
Process Permissions:

Overlaying the Current Process ( exec Command):


Hour 7: Variables
Variables:
	- Define Variable
		- name=value
		- ex: FRUIT=peach
	- Variable Naming
		- can contain a-z A-Z 0-9 _
		- should not start with number 
	- Variable Values
		- can be anything
		- carefull with space in between
			ex:$ FRUIT=apple orange plum (resutls in sh: orange:  not found.)
			try ex:
				$ FRUIT="apple orange plum"
				$ FRUIT='apple orange plum'
	- Accessing Variables
		- ex $ echo $FRUIT (prefix the name with $)
		- if you miss $ then FRUIT is printed
		- IMP $ only used to access variable not to define it
			- ex $ $FRUIT=apple (this throws error)
		- When $ used with variable the value is substituted
Arrays
	- Array Variable
		- Simpe way to create Array is to assign value to index
			name[index]=value
		- ex:
			$ FRUIT[0]=apple
			$ FRUIT[1]=banana
			$ FRUIT[2]=orange
			$ FRUIT[10]=plum
		- shell does not fill in empty spaces in array it keeps track only of filled element
		- ex: if array name assign scaller value and then value to index [0] element becode value "apple" 
			$ FRUIT=apple
			$ FRUIT[1]=peach
		- Intiatialization:
			- syn: set -A name value1 value2 ... valuen
			- syn: name=(value1 ... valuen)
	- Accessing Array Value
		- syn: ${name[index]}
		- ex: $ echo ${FRUIT[2]}
		- To real all items
			- ${name[*]}  : to print all items does not work for the items with spaces
			- ${name[@]}  : to print all items even with spaces

Read-only Variables
	- readonly command to make variable readonly
	- ex :
		$ FRUIT=kiwi
		$ readonly FRUIT
		$ FRUIT=message
Unset variables
	- unset
	- works both on scaller and vector
		ex: unset FRUIT
			unset ARR[8]
	- cannot reset readonly
Environment Variables
	- three types
		- Local Variables: variable preset in current instance of shell. They are not availble to programm started by the shell. All prev are local variabels
		- Environment Variables: Variable available to child process of the shell.
		- Shell Vairable: Variable set by shell and needed by shell to function correctly

			Attributes 		local 		Environment 	Shell
			Accessible by 	 No			Yes             Yes child processes
			Set by users     Yes        Yes             No
			Set by the shell No         No              Yes
			User modifiable  Yes        Yes             No
			Required by the  No         No              Yes shell

Exporting Environment Variables
	- you can place variable in evnvironment by exporting them
	- syn: name=value ; export name
	- ex:
		PATH=/sbin:/bin ; export PATH
	- ex: can export more than one variable
		export PATH HOME UID
	- Exporting in bash ksh ex:
		export name=value
	- Can export more than one variables
		ex: export FMHOME=/usr/frame CLEARHOME=/usr/atria PATH

Shell Variables:
	- Variables that shell set during intialization. User can modify these values
	- All above are Environment and Local are user variable as user sets them
	- ex: PATH, HOME, PID, PWD

Hour 8: Substitution
	- When shell encounters $Var it does substitutions
	- Apart from this following are the differnt types of substitution
	1. File Name substituion (Globbing):
		- shell expand string with wildcards into list of filenames
			- *: 0 or more occurences
				- ex:  ls *
				- command prefix*
				- command *suffix
				- command prefix*suffix
			- ?: single occ of character
				- ex: ls ch0?.doc
			- [matches] : occ of characters
				- ls ch0[0123456789].doc
				- ls ch0[0-9].doc
				- ls [a-z]*
				- ls *[a-zA-Z0-9]
				- Netating set: command [!characters]
				- ls [!a]*
	- Substituntion
		- Default Value: set when variable null or empty. world default value
			${parameter:-word}
		- ex:  PS1=${HOST:-localhost}"$ " ; export PS1 ;
		- Assigning a Default Value: To set value of variable if param unset
			- ${parameter:=word}
				PS1=${HOST:= ́uname -n ́}"$ " ; export PS1 HOST ;
		- Abort due to variable erors : it writes message when param is unset
			- ${parameter:?message}
				- ex ${HOME:?"Your home directory is undefined."}
			- ${parameter:+word} : set param to word if word is set
				- echo ${DEBUG:+"Debug is active."}

	- Command and Arithmetic Substitution
		- Command: Enable to capture output of one command and set it as input to other command
			ex: 
				DATE= ́date ́
				USERS= ́who | wc -l ́
				UP= ́date ; uptime ́
				grep  ́id -un ́ /etc/passwd : to pass output of one to other
		- Arithmatic: Enable to do simplle arithmatic operations
			- with this for arithmatic other program not needed to execute expr OR bc
			- $((expression))
			- ex: foo=$(( ((5 + 3*2) - 4) / 2 ))

Hour 9 : Quoting
	- to prevent supress special characters * ? [ ] ' " \ $ ; & ( ) | ^ < > new-line space tab
	- ex:
		echo Hello; world (errro world is not a command)
		echo Hello\; world : escape ; to make it work

		echo You owe $1250 : $1 is special shell vairable
		out: You own 250
		fix it : echo You owe \$1250
	- Backsplash: any special character followed by \ looses its special meaning
	- Single Quote: anythin in single quote is just as if its escaped
	- Doble Quote: 
		It takes away meaning of all specail characters except,
		● $ for parameter substitution.
		● Backquotes for command substitution.
		● \$ to enable literal dollar signs.
		● \ ́ to enable literal backquotes.
		● \" to enable embedded double quotes.
		● \\ to enable embedded backslashes.
		● All other \ characters are literal (not special).

	- Usage
		- Quoting to Access Filenames Containing Special Characters
			- rm 'ch*'
		- Quoting Regular Expression Wildcards
			-  grep '[0-9][0-9]*$' report2 report7

Hour 10: Flow Control (if switch)
	- IF
		- Syntax
			if list1 
			then
				list2 
			elif list3
			then
				list4
			else
				list5
			fi
		- Shell consider if as list so it can be written in one line
			- ex if list1 ; then list2 ; elif list3 ; then list4 ; else list5 ; fi ;
		ex: 
			NOTE: ; before then
			if uuencode koala.gif koala.gif > koala.uu ; then
			   echo "Encoded koala.gif to koala.uu"
			else
			   echo "Error encoding koala.gif"
			fi

		- test [extpression] Command:
			- conidtion for if and elif is actually test command
			- ex: test expression
			- test [expression]
			Here expression can be one of follwoing
			- File test 
				- Syntax:
					test option file
					[option file]
				Options are 
				Option 		   Description
					-b file    True if file exists and is a block special file.
					-c file    True if file exists and is a character special file.
					-d file    True if file exists and is a directory.
					-e file    True if file exists.
					-f file    True if file exists and is a regular file.
					-g file    True if file exists and has its SGID bit set.
					-h file    True if file exists and is a symbolic link.
					-k file    True if file exists and has its "sticky" bit set.
					-p file    True if file exists and is a named pipe.
					-r file    True if file exists and is readable.
					-s file    True if file exists and has a size greater than zero.
					-u file    True if file exists and has its SUID bit set.
					-w file    True if file exists and is writable.
					-x file    True if file exists and is executable.
					-O file    True if file exists and is owned by the effective user ID.
			- String comparison
				-z string        True if string has zero length.
				-n string       True if string has nonzero length.
				string1 = string2       True if the strings are equal.
				string1 != string2       True if the strings are not equal.
				ex:
					NOTE: double quote to expression
					if [ -z "$FRUIT_BASKET" ] ; then
					    echo "Your fruit basket is empty" ;
					else
					    echo "Your fruit basket has the following fruit: $FRUIT_BASKET"
					fi

				ex:
					if [ -n "$FRUIT_BASKET" ] ; then
					    echo "Your fruit basket has the following fruit: $FRUIT_BASKET"
					else
					    echo "Your fruit basket is empty" ;
					fi

				ex:
					A simple example of using string comparisons is the following:
					if [ "$FRUIT" = apple ] ; then
					    echo "An apple a day keeps the doctor away."
					else
					    echo "You must like doctors, your fruit $FRUIT is not an apple."
					fi

				ex:
					if [ "$FRUIT" != apple ] ; then
					    echo "You must like doctors, your fruit $FRUIT is not an apple."
					else
					    echo "An apple a day keeps the doctor away."
					fi

			- Numeric comparison
				Syn: test int1 operator int2
				Syn: [ int1 operator int2 ]

				- when command executes 0 is success non zero is error
				ex: 
					if [ $? -eq 0 ] ; then
    					echo "Command was successful." ;
    				else
					    echo "An error was encountered."
					    exit
					fi
				- Operators
					Description
					int1 -eq int2
					int1 -ne int2
					int1 -lt int2
					int1 -le int2
					int1 -gt int2
					int1 -ge int2
				- Logical operator 
					! expr
						ex: $ if [ ! -d $HOME/bin ] ; then mkdir $HOME/bin ; fi
					expr1 -a expr2
					expr1 -o expr2
				- $$ || short circiting operators in expression
					ex: $ test ! -d $HOME/bin && mkdir $HOME/bin
					ex: if [ -z "$DTHOME" ] && [ -d /usr/dt ] ; then DTHOME=/usr/dt ; fi

	- Case statement
		- 
			case word in 
				pattern1)
					list1
					;; 
				pattern2)
					list2
					;; 
			esac
		- ex:
			FRUIT=kiwi
			case "$FRUIT" in
			  apple) echo "Apple pie is quite tasty." ;;
			banana) echo "I like banana nut bread." ;;
			    kiwi) echo "New Zealand is famous for kiwi." ;;
			esac
		- With case can do pattern matching
			case "$TERM" in
			      *term)
			           TERM=xterm ;;
			      network|dialup|unknown|vt[0-9][0-9][0-9])
			  TERM=vt100 ;;
			esac

Hour 11: Loops
