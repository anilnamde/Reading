Hour 1
==========
Who
date
Who am i


Simple Command
	Command

Compex Command
	Command arg1 arg2 ... 

Compound Command
	Command1; Command2; ... CommandN;
	// ; : command separator 

Shell:
	Accepts inputs and processes it also it has the programming capabilities conditional statement, loops etc
	If we enter more than one world then "word1 word2 word3 ... wordN" shell treats first as command and others as arguments
Types Shell
	= Bourn Shell - $ - ksh sh bash (bin/sh)
		- ALGOL style syntax
		- no command history
		- no file name auto completion
		- difficulty in executing multiple background processes
	= C shell - % - csh tcsh (bin/csh new /bin/tcsh http://www.primate.wisc.edu/software/csh-tcsh-book/)
		+ c style syntax
		+ history
		+ auto compete file name
		+ job control
		+ aliases 
		- lacking functions
	= Kourn shell (Cshell + Bourn shell)
		+ function support
		+ arithmatic support
	= Bash Bourn Again Shell
		installs as /bin/bash
		+ standardised portable
	[For root user prompts become # so be careful]
	

Hour 2
=======
Kernel
Command - Propgram with arguments
Utility - Simple commands

Shell Lifecycle
	- Login - /etc/passwd for password entry
	- Initializeation read profiles
		- etc/profile file : File maintain by sys adming for all users 
		- or .profile file : In users control
	- Dispaly propmpt

Shell Execution
	- Interaction - command - exec - command mode
		- start using /bin/sh comamnd
		- exit to stop
	- noninteractive - When shell accepts programm runs and when done exits
		- /bin/sh filename [file name set of command to execute ex: date; who am i;]

Initialization File Content
	- should be small to setup complete working environment
	- /etc/profile  maintained by sys admin
	- .profile  under user control do as much as u want in here
	- Things to set
		- type of terminal
		- list of directories to locate command

Setting Terminal Type
	TERM=vt100

Setting PATH
	- PATH=/bin:/usr/bin NOTE: separated by :
	- path to look for a command
	- if we type on command prompt and its not found such message is printed on the console

Setting the MANPATH
	- settting path for man page help
	- ex: MANPATH=/usr/man:/usr/share/man
	- ex command: man who t

Making a Shell Script Executable
	- make file executatble (chmod a+x ./logins)
	- make sure right shell is used

	- ex:
		#!/bin/sh
		date ; who ;

Comments
	# anything after this is comment

Getting Help:
	- man command

Hour 3 
======== 
Working with files
	- simple file : 
	- directory files
	- special files: like devices etc

Listing file
	- ls comand
	- ls -F :  to find which are dir and files
	- ls -1 : to print output in one line
	- ls -a : to list all hidden file directories

Options Grouping
	- ls -aF : to list hidden files and show types
	- order of flags do not matter

Viewing content of file
	- Cat file(s) : to list the content of file
	- cat -n file1 file2 : -n list number in file lines
	- cat -b file : -b to skip numbering blank lines

Counting Word:
	- wc [option] files : provides summary of lines words characters
	- ex : wc file
		[lines no] [words no] [charcters no]   [file name]
	- ex : wc .rhosts .profile
		7 14 179 .rhosts
		133 405 2908 .profile
		140 419 3087 total
	- options 
		- l : lines
		- w : words
		- c or m : characters
Manipulating Files:
	= Copy : cp sourceFile destinationFile
		- if destinationFile exists it gets overriden automatically
		- cp -i source dest : - interactive mode it ask if u like to override or not
		- $ cp test_results work/: copies test_results in work
		-  $ cp res.01 res.02 res.03 work/: copies multiple files to work. Only works in destination if directory
	= Rename
		- mv source dest
		- silently overrides destination files
		- i : has interactive mode
	= Removing files
		- rm file(s) - remvoe one or more file
		- rm res.01 res.02 
		- common error -attempt to remove directory, file not exist
		- rm -i hw1 hw2 hw3 : interactive mode
		- rm res.01 res.02 res.03 if file res.02  does not exist rest two are still removed



Hour 4
=======
Working with directories
- Absolute path cannot exceep 1024 old ways 
- file name can have a-z 0-9 _ . - 
- unix file name are case sensitive
- pwd : command print working directory
- . current dir .. parent directory
Home directory
	- cd  :if issued without argument set set home directory as current on then type pwd to see path
Change Directory
	- cd dirnamepath
Listing Files & Directories
	- ls dir : dir directory whose content we want to see
	- ls /home /usr/local :  you can specify more than one dir
	- list filename : only show one file
	- $ ls .profile docs/ /usr/local /bin/sh : mix match is allowed
	- ls -d /home/ranga: -d to force see only name of dir no t the content
Manupulating Directory
	- mkdir docs pub : creat more than one directories
	- mkdir /tmp/ch04/test1 : create effor if any sub directory does not exists
	- mkdir -p /tmp/ch04/test1 : create all the listed tree of directories
Copy Directory
	- cp -r source dest : copy directory recursiverly copies source under dest directory
	- $ cp -r docs/book docs/school work/src /mnt/zip : copies all list to last directory
	- $ cp -r .profile docs/book .kshrc doc/names work/src /mnt/jaz : mix of file and directory if fine
Move Directory:
	- mv source destination
	- $ mv /home/ranga/names /tmp : moves file names to directory tmp
	- mv docs/names /tmp/names.txt : move and rename in one command is allowed
	- mv work/ docs/ .profile pub/ : move mu
	- mv /tmp/ch01 /home/ranga/docs : moving file from one file system to other does not work. in such case u need to copy first and then remove it
Removing directory
	- rmdir
	- rm -rf : removes everything
	- rmdir ch01 ch02 ch03 multiple dir : removes only empty directory
	- ls -A bar : to check if directory is empty or not


Hour 5
=======
Manipulating File Attributes
- Manipulating Permission, Ownners, Group

Different Types of file in Unix and how to identify them
	- ls -l : list details of file
	- -rwxr-xr-x : first - indicates its notrma file following are other symbol and meaning
		- Regular file
		l Symbolic link
		c Character special
		b Block special
		p Named pipe
		s Socket
		d Directory file
	- file fileName: programe hellps to analyse and print information of file

Rugular file: can store text or binary data
Symbolic Links:
	- its like shortcut and 
	- many links can point to same fiel/directory
	- ls -l : to list link
	- ln -s source destination : to create link
	- ln -s /home/httpd/html/users/ranga /home/ranga/public_html : you can use relative or absolute path
	- catch ln -s /home/ftp/pub/ranga pub: if pub directory is in current path then ranga link is created under pub directory
Devices files:
	- files access points to devices coneected PC
	- located under /dev 
	- Two tyeps of device file
		- Block special file
			> can send large chunk of data
			> brw------- : starts with b
			> also has minor and major numbers
		- Character special file
			> communicates to devices one char at time
			> ls -l : crw------- : starts with c
			> apart from that it shows minor and major number which indicates device driver to be used
Names piples file:
	- acommand | bcommand
	- simple are anynimouse pipe but when more control needed named piple can be created
	- this helps tro precess communicate each other IPC its popular way of ipc in unix
	- p----- : p indicates named pipe
Socket files:
	- Socket can pass data and info betwenn process running of two diff machines 
	- Socket is created with communication with other process on newtowrk is required
	- Web browser uses sockets to communicate to web server

Owners, Group, Permissions
	- Files have permission Owners, Group and Others
	- Permision on to each section read, write and execute
	- ls -l : display permission on the file
	- permissons -rwxrwxrwx [filetytpe|owner read write execute| group read write execute | other read write execute]
	- ls -l : output -rwxr-xr-x   1 ranga    users        2368 Jul 11 15:57 .profile*
		Here user is ranga and group is users
	- Directory also has permission and its equally important


SUID and SGID File Permission
	- additional permission can be given to files with Set User ID Set Group ID bit
	- whe SUID bit set executed file you inherit permission of owner if not then user who executed file his permission are used
	- Same goes for SGID
	- SUID and SGID bits will appear as the letter "s" [-r-sr-xr-x] S capital S means executatble bit not set
	-  SUID bit or stick bit

Changing permission:
	- chmod expression files
		- expression can be Symbolic or Octal
		- Symbolic method syntax 
			(who)(action)(permissions
			- who -> u Owner - g group - a all - o others
			- action -> + add permission - remove permissin = explicitly set file permission
			- permission -> r read, w write, x execute, s SUID or SGID
			ex:
				- chmod a=r * Or chmod guo=r * : read permissinn to all files in folder
				- chmod go-w .profile : only owner to have write permission
				- cd ; chmod go= * OR cd ; chmod go-rwx * : to remove permisson on all files in home dir for others
				- NOTE: order in which permissio or user appers is irrelavent
				- chmod go-w,a+x a.out : to set more than one permission use , 
				- cd ; chmod ug+s . : to set SUID SGID bits home dir
				- chmod -R o+r pub : -R recursive change permission for all files
		- Octal Method:
			- uses numbr to set permission to three categories
			- 4 - 100 - Read / 2 - 010 - Write / 1 - 001 - Execute
			- SGID SUID as first number in group of 4 [XXXX - SUID/Owner/Grop/Others]
			ex:
				- chmod 0444 * : read to all
				- chmod 0600 .profile : read write to Owner
				- GOTCHA:  (Main difference between Octal Symbol mehtod)
					- Octal one used reset permission for all the users
					- While in Symbole we can do "chmod u+rw file" this just modify it for owner not modify permission for others and group
Change Owner and Group

